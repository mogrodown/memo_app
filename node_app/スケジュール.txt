
ステップ１
 なるべくプレーンなHTMLとJavaScriptのみでメモアプリを構成する。

 学んだこと：
  1.JavaScriptは普通にHTMLで複数ロードすれば、相互に関数を呼び合える。
    (最もシンプルなモジュール分割）

  2.JavaScriptからのDOMの操作
    DBから読み込んだ動的データを表示するため、
    JavaScriptによるテーブル作成は必須。
    HTML上にテーブル用のコンテナのみ用意し、
    JavaScriptで全て動的生成する。

  3.JavaScriptの非同期処理
    UIを遅延させないため、全てのコストがかかる処理は非同期処理とする。
    JavaScriptの非同期処理から見えるのは以下の大原則。

    データが取得できたらUIを描画する

    あたりまえのことだが、これを実現するため、JavaScriptでは
    Promise機構を提供している。

    JavaScriptライブラリのおそらくほとんどのコスト関数は
    Promise機構で実装されている。すなわち、Promiseインスタンスを生成して
    リターンしている。(例えばfetchAPIもPromise実装されている)

    これにより、該当関数の非同期処理が成功した時に、呼び出し元の
    then句でキャッチできるし、任意の引数も受け取れる。

    Promiseインスタンスは「成功時」と「失敗時」の二種類の関数を許容し、
    成功時にはthen句が、失敗時にはcatch句が実行される。

  4.WebAPIの引数渡し
    引数渡しには、以下の３つの手段がある。
    (a) パスに含む
        サーバ(API定義)：/api/memo/:id
        呼出：/api/memo/999
        
    (b) クエリパラメータ
        サーバ(API定義)：/api/memo
        呼出：/api/memo?age=999

    (c) request.bodyに含む
        サーバ(API定義)：/api/memo
        呼出：/api/memo    req.body={'age': 999}

  5.mongoDBドライバの記述仕様
    接続→　クエリ　→　切断を毎回実施。
    MongoClient.connect(url, option, (err, client) => {
      この接続コールバック内で全クエリを済ませてしまう。
      client.close() ...切断
    });

  6.JavaScript(ブラウザ側)からのWebAPIの呼び出し方。
    fetchAPIを使う。
    fetchAPIはJavaScriptの最新仕様に漏れず、Promise機構を
    用意しているので以下のように記述できる。
    fetch('apiパス')
      .then(apiレスポンス引数 => レスポンスを使った処理)
      .catch(api失敗引数 => 失敗値を使った処理)

  7.HTMLの基本的なこと。
    やはり意味ブロックはdivで区切るとよい。
    div間の間隔調整のため、やはりcssは必要となる。
    ボタンをformタグで囲うことは別に必須ではない。

  8. HTMLの要素基本
    各要素は実体、ボーダー、空白の３つで構成されており、これをボックスと呼称している。
    空白には、自身の内部を示すパディングと、外部との空白を示すマージンがある。

    別の要素との間隔を開けたい場合はマージンを、要素自体がパンパンで見にくい場合は
    パディングを使う・・感じか。

    間隔をピクセル単位で調整するばあいはこのマージンをCSSで調整する。
    （HTMLでは調整できない）

    

ステップ２
  どうするか。メモ機能はもうコレ以上、発展させても・・
  いや、ページ機能つくるか。複数ページ。

  
        

